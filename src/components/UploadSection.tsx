import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Upload, X, FileImage, AlertCircle } from "lucide-react";
import { useRef, useState } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { useFileUpload } from "@/hooks/useFileUpload";
import { useToast } from "@/hooks/use-toast";
import { usePricing } from "@/hooks/usePricing";
import { useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";

const UploadSection = () => {
  const { user, profile } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();
  const { pricePerPhoto } = usePricing();
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [instructions, setInstructions] = useState("");
  const [isDragOver, setIsDragOver] = useState(false);
  const { uploading, uploadedFiles, uploadFiles, removeFile, clearFiles } = useFileUpload();

  const handleFileSelect = () => {
    if (!user) {
      toast({
        title: "Connexion requise",
        description: "Vous devez être connecté pour uploader des photos",
        variant: "destructive",
      });
      navigate("/auth");
      return;
    }
    fileInputRef.current?.click();
  };

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      if (files.length > 10) {
        toast({
          title: "Trop de fichiers",
          description: "Vous ne pouvez uploader que 10 photos maximum",
          variant: "destructive",
        });
        return;
      }
      await uploadFiles(files);
    }
  };

  const handleDrop = async (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
    
    if (!user) {
      toast({
        title: "Connexion requise",
        description: "Vous devez être connecté pour uploader des photos",
        variant: "destructive",
      });
      navigate("/auth");
      return;
    }

    const files = e.dataTransfer.files;
    if (files.length > 10) {
      toast({
        title: "Trop de fichiers",
        description: "Vous ne pouvez uploader que 10 photos maximum",
        variant: "destructive",
      });
      return;
    }
    await uploadFiles(files);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  };

  const handleCreateOrder = async () => {
    if (uploadedFiles.length === 0) {
      toast({
        title: "Aucune photo",
        description: "Veuillez uploader au moins une photo avant de continuer",
        variant: "destructive",
      });
      return;
    }

    if (!instructions.trim()) {
      toast({
        title: "Instructions manquantes",
        description: "Veuillez décrire les modifications souhaitées",
        variant: "destructive",
      });
      return;
    }

    try {
      // IMPORTANT: Vérifier obligatoirement le statut VIP côté serveur
      // Ne jamais faire confiance au statut côté client uniquement
      
      // Vérifier que l'utilisateur est bien VIP avec la base de données
      const { data: profileCheck, error: profileError } = await supabase
        .from("profiles")
        .select("is_vip, deferred_billing_enabled")
        .eq("id", user.id)
        .single();

      if (profileError) {
        throw new Error("Impossible de vérifier votre statut");
      }

      // Si l'utilisateur est VIP ET a la facturation différée activée, créer directement la commande
      if (profileCheck?.is_vip && profileCheck?.deferred_billing_enabled) {
        const { data: order, error: orderError } = await supabase
          .from("orders")
          .insert({
            user_id: user.id,
            total_amount: 0,
            currency: "EUR",
            status: "completed", // VIP = automatiquement complétée
            instructions: instructions || null,
            order_number: "", // Will be generated by trigger
          })
          .select()
          .single();

        if (orderError) {
          throw new Error("Impossible de créer la commande VIP");
        }

        // Ajouter les fichiers à la commande
        const fileInserts = uploadedFiles.map(file => ({
          order_id: order.id,
          file_name: file.name,
          file_path: file.path,
          file_size: file.size,
          file_type: file.name.split('.').pop() || 'unknown',
          is_original: true
        }));

        const { error: filesError } = await supabase
          .from("order_files")
          .insert(fileInserts);

        if (filesError) {
          throw new Error("Impossible d'enregistrer les fichiers");
        }

        // Envoyer email de notification avec les fichiers
        try {
          await supabase.functions.invoke('send-upload-notification', {
            body: {
              files: uploadedFiles.map(f => ({ 
                name: f.name, 
                size: f.size, 
                path: f.path 
              })),
              userEmail: user?.email || 'Utilisateur anonyme',
              orderNumber: order.order_number,
              instructions: instructions
            }
          });
        } catch (emailError) {
          console.error('Email notification error:', emailError);
        }

        toast({
          title: "Commande VIP créée",
          description: "Votre commande a été créée avec succès. Traitement prioritaire activé !",
        });
        
        // Réinitialiser le formulaire
        clearFiles();
        setInstructions("");
        return;
      }

      // Pour TOUS les autres utilisateurs (non-VIP ou VIP sans facturation différée), 
      // utiliser OBLIGATOIREMENT le système de paiement
      const { data, error } = await supabase.functions.invoke('create-payment', {
        body: {
          files: uploadedFiles.map(f => ({ 
            name: f.name, 
            path: f.path, 
            size: f.size 
          })),
          instructions,
          forcePayment: true // Force le paiement même pour les VIP sans facturation différée
        }
      });

      if (error) throw error;

      if (data?.url) {
        window.open(data.url, '_blank');
        toast({
          title: "Redirection vers le paiement",
          description: "Une nouvelle fenêtre s'est ouverte pour finaliser votre commande",
        });
      } else {
        throw new Error("Aucune URL de paiement reçue");
      }
    } catch (error) {
      console.error('Payment error:', error);
      toast({
        title: "Erreur",
        description: "Impossible de créer la commande",
        variant: "destructive",
      });
    }
  };

  return (
    <section id="upload-section" className="py-16 px-4 bg-background">
      <div className="max-w-4xl mx-auto">
        <Card className="shadow-card">
          <CardHeader className="text-center">
            <CardTitle className="text-3xl font-bold text-foreground">
              Déposez votre Photo et laissez notre IA faire le reste
            </CardTitle>
          </CardHeader>
          <CardContent className="p-8">
            <div 
              className={`border-2 border-dashed rounded-lg p-12 text-center transition-colors cursor-pointer ${
                isDragOver 
                  ? 'border-brand-primary bg-brand-primary/5' 
                  : uploadedFiles.length > 0 
                    ? 'border-green-500/50 bg-green-50/50' 
                    : 'border-muted-foreground/30 hover:border-brand-primary/50'
              }`}
              onDrop={handleDrop}
              onDragOver={handleDragOver}
              onDragLeave={handleDragLeave}
              onClick={handleFileSelect}
            >
              <input
                ref={fileInputRef}
                type="file"
                multiple
                accept="image/*"
                onChange={handleFileChange}
                className="hidden"
              />
              
              {uploading ? (
                <>
                  <div className="animate-spin rounded-full h-16 w-16 mx-auto mb-4 border-b-2 border-brand-primary"></div>
                  <h3 className="text-xl font-semibold mb-2 text-foreground">
                    Upload en cours...
                  </h3>
                  <p className="text-muted-foreground">
                    Veuillez patienter pendant l'upload de vos photos
                  </p>
                </>
              ) : uploadedFiles.length > 0 ? (
                <>
                  <FileImage className="h-16 w-16 mx-auto mb-4 text-green-600" />
                  <h3 className="text-xl font-semibold mb-2 text-foreground">
                    {uploadedFiles.length} photo{uploadedFiles.length > 1 ? 's' : ''} uploadée{uploadedFiles.length > 1 ? 's' : ''}
                  </h3>
                  <p className="text-muted-foreground mb-6">
                    Cliquez pour ajouter d'autres photos (max 10 au total)
                  </p>
                </>
              ) : (
                <>
                  <Upload className="h-16 w-16 mx-auto mb-4 text-muted-foreground" />
                  <h3 className="text-xl font-semibold mb-2 text-foreground">
                    Glissez-déposez vos photos ici
                  </h3>
                  <p className="text-muted-foreground mb-6">
                    Ou cliquez pour sélectionner jusqu'à 10 photos
                  </p>
                </>
              )}
              
              {!uploading && (
                <>
                  <Button 
                    size="lg"
                    className="bg-gradient-button hover:scale-105 transform transition-all duration-300 shadow-glow text-white font-semibold mb-4 w-full sm:w-auto px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg"
                    disabled={uploadedFiles.length >= 10}
                  >
                    {uploadedFiles.length > 0 ? 'Ajouter des photos' : 'Choisir mes photos'}
                  </Button>
                  <p className="text-sm text-muted-foreground">
                    Formats acceptés: JPG, PNG, WEBP • Taille max: 50MB par photo
                  </p>
                </>
              )}
            </div>

            {/* File List */}
            {uploadedFiles.length > 0 && (
              <div className="mt-6">
                <div className="flex justify-between items-center mb-4">
                  <h4 className="font-semibold text-foreground">Photos uploadées :</h4>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={clearFiles}
                    className="text-muted-foreground hover:text-destructive"
                  >
                    Tout supprimer
                  </Button>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {uploadedFiles.map((file) => (
                    <div key={file.id} className="relative group border rounded-lg p-3 bg-muted/30">
                      <div className="flex items-start justify-between">
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium text-foreground truncate">
                            {file.name}
                          </p>
                          <p className="text-xs text-muted-foreground">
                            {formatFileSize(file.size)}
                          </p>
                        </div>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            removeFile(file);
                          }}
                          className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-destructive hover:text-destructive-foreground"
                        >
                          <X className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            <div className="mt-8 p-6 bg-muted/50 rounded-lg">
              <h4 className="font-semibold mb-3 text-foreground">Instructions de retouche :</h4>
              <textarea 
                value={instructions}
                onChange={(e) => setInstructions(e.target.value)}
                className="w-full h-32 p-3 border rounded-md resize-none focus:ring-2 focus:ring-brand-primary focus:border-transparent"
                placeholder="Décrivez précisément les modifications souhaitées (ex: supprimer tous les meubles, enlever les personnes, modifier l'éclairage, etc.)"
                required
              />
              <div className="flex flex-col gap-4 mt-4">
                <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2 sm:gap-4">
                  <div className="flex flex-col sm:flex-row sm:items-center gap-2">
                    <span className="text-sm text-muted-foreground">
                      Prix : <span className="font-bold text-brand-primary">
                        {uploadedFiles.length > 0 ? `${pricePerPhoto * uploadedFiles.length}€ TTC` : `${pricePerPhoto}€ TTC par photo`}
                      </span>
                      {uploadedFiles.length > 0 && <span className="text-xs"> ({pricePerPhoto}€ par photo)</span>}
                    </span>
                    {uploadedFiles.length > 0 && (
                      <span className="text-xs px-2 py-1 rounded bg-brand-primary/10 text-brand-primary">
                        {uploadedFiles.length} photo{uploadedFiles.length > 1 ? 's' : ''}
                      </span>
                    )}
                  </div>
                </div>
                <div className="w-full">
                  {user ? (
                    <Button 
                      size="lg"
                      className="bg-gradient-button hover:scale-105 transform transition-all duration-300 shadow-glow w-full sm:w-auto sm:min-w-[200px] px-6 sm:px-8 py-3 sm:py-4 text-base sm:text-lg font-semibold"
                      onClick={handleCreateOrder}
                      disabled={uploadedFiles.length === 0 || !instructions.trim() || uploading}
                    >
                      {uploading ? "Upload..." : "Commander maintenant"}
                    </Button>
                  ) : (
                    <Button 
                      size="lg"
                      className="bg-gradient-button hover:scale-105 transform transition-all duration-300 shadow-glow w-full sm:w-auto sm:min-w-[200px] px-4 sm:px-8 py-3 sm:py-4 text-sm sm:text-lg font-semibold"
                      onClick={() => navigate("/auth?tab=signup")}
                    >
                      <span className="block sm:hidden">S'inscrire</span>
                      <span className="hidden sm:block">Créer un compte et commander</span>
                    </Button>
                  )}
                </div>
              </div>
              
              {!user && (
                <div className="flex items-center gap-2 mt-3 p-3 bg-amber-50 border border-amber-200 rounded-md">
                  <AlertCircle className="h-4 w-4 text-amber-600" />
                  <p className="text-sm text-amber-800">
                    Vous devez créer un compte pour passer commande
                  </p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </section>
  );
};

export default UploadSection;